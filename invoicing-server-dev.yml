server:
  port: 16030
  
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:18761/eureka/
  instance:
    status-page-url: http://${zuul.address}${zuul.api-url}swagger-ui.html
zuul:
  address: ${address:192.168.1.10:18765}
  api-url: ${api-url:/api/invoicing-server/}
logging:
  level:
    root: INFO
spring:
  cloud:
    stream:
      instanceIndex: 0
      instanceCount: 1
      bindings:
        invoicing_output_channel:
          destination: topic-invoicing
          group: invoicing
          binder: invoicing_binder
        invoicing_input_channel:
          destination: topic-invoicing
          group: invoicing
          binder: invoicing_binder
      binders:  
        invoicing_binder:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: rabbitmq
                port: 5672
                username: admin
                password: admin
                virtual-host: /

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
   # 配置数据源
  datasource:
  
    type: com.alibaba.druid.pool.DruidDataSource
    # For Mysql
    #jdbc:mysql://101.201.56.163:3838/test_db
   # url: jdbc:mysql://101.201.56.163:3838/test_db
   # username: wetool_test
   # password: Weitoo502
    # For Mysql
    url: jdbc:mysql://mysql:3306/invoicing?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: 123456
    driverClassName: com.mysql.jdbc.Driver
    # For H2
    # 存储在内存中 2
    #url: jdbc:h2:mem:~/.h2/area-server-db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    #username: sa
    #password:
    #driverClassName: org.h2.Driver
    schema: classpath:sql/schema.sql  # 结构文件
    initialize: false   # 是否初始化
    # 导入编码
    sql-script-encoding: UTF-8
    continue-on-error: false

    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    #  useGlobalDataSourceStat=true
  h2:
    console:
      enabled: true # 是否允许访问控制台
      path: /h2-console # 配置h2控制台访问路径 默认 /h2-console

# REDIS (RedisProperties)
  redis:
    database: 0 # database name  
    host: redis # server host  
    password:   # server password  
    port: 6379    # connection port  
    pool: # pool settings ...
      max-idle: 150
      min-idle: 0
      max-active: 1000
      max-wait: -1

#设置为ture时，feign可能调用失败
feign:
  hystrix:
    enabled: false

#出入库类型列表构造
type: 
  listProp:   #父类对应的多个子类节点
    - name: 1 #填写入库单类型列表
      value: array1 #展示入库类型列表数组(数组中存入mapNams对应出库类型编号)
    - name: 2 #填写出库单类型列表
      value: array2 #展示出库类型列表数组(数组中存入mapNams对应出库类型编号)  
  array1: 1,4 
  array2: 6,10,12
  mapNames:    #入库类型编号映射入库类型名称
    1:  采购入库
    2:  拆分入库
    3:  盘点调整入库
    4:  其他入库
    5:  商品退换货入库
    6:  破损出库
    7:  线上销售出库
    8:  店铺销售出库
    9:  调拨出库
    10: 换货出库
    11: 退货出库
    12: 其他出库
    13: 拆分出库
    
  